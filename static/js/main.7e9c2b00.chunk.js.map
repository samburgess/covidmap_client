{"version":3,"sources":["components/HeatMap.js","App.js","serviceWorker.js","index.js"],"names":["HeatMap","props","console","log","changeDate","e","setState","date_string","target","innerText","day","positions","state","data","filter","el","includes","map","el2","newEl","Number","options","days","center","lat","lng","zoom","loading","fetch","then","res","json","result","length","opacity","error","dayList","this","className","key","toString","onClick","value","ref","_googleMap","bootstrapURLKeys","defaultCenter","defaultZoom","heatmapLibrary","heatmap","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"ySAqGeA,E,kDA/FX,WAAYC,GAAO,IAAD,6BAEdC,QAAQC,IAAI,gBACZ,cAAMF,IA+CVG,WAAa,SAACC,GAEZ,EAAKC,SAAS,CACZC,YAAcF,EAAEG,OAAOC,UACvBC,IAAK,CAACC,UAAY,EAAKC,MAAMC,KAAKC,QAAO,SAACC,GAAD,OAAQA,EAAG,GAAGC,SAASX,EAAEG,OAAOC,cAAY,GAAG,GAAGQ,KAAK,SAACC,GAC/F,IAAIC,EAAQ,GAGZ,OAFAA,EAAK,IAAUC,OAAOF,EAAG,KACzBC,EAAK,IAAUC,OAAOF,EAAG,KAClBC,SAtDT,EAAKP,MAAQ,CACTC,KAAK,CAAC,GACNH,IAAM,CAACC,UAAU,GAAIU,QAAQ,IAC7Bd,YAAY,GACZe,KAAK,CAAC,GACNC,OAAS,CACLC,IAAM,QACNC,KAAO,SAEXC,KAAO,IACPC,SAAU,GAdA,E,gEAkBG,IAAD,OAChBzB,QAAQC,IAAI,SACZyB,MAAM,2CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAK1B,SAAS,CACZO,KAAMmB,EACNtB,IAAK,CAACC,UAAYqB,EAAOA,EAAOC,OAAO,GAAG,GAAGhB,KAAK,SAACF,GACjD,IAAII,EAAQ,GAIZ,OAHAA,EAAK,IAAUC,OAAOL,EAAE,KACxBI,EAAK,IAAUC,OAAOL,EAAE,KAEjBI,KAETE,QAAS,CACPa,QAAS,KAGXZ,KAAOU,EAAOf,KAAK,SAACF,GAClB,OAAOA,EAAG,MAEZR,YAAcyB,EAAOA,EAAOC,OAAO,GAAG,GACtCN,SAAU,OAGd,SAACQ,GACCjC,QAAQiC,MAAMA,Q,+BAkBf,IAIDC,EAJA,OAcJ,OARAA,EAAUC,KAAKzB,MAAMU,KAAKL,KAAK,SAACF,GAAD,OAC3B,wBACIuB,UAAU,QACVC,IAAOxB,EAAGyB,WACVC,QAAW,EAAK7B,MAAMe,QAAU,KAAO,EAAKvB,WAC5CsC,MAAO3B,GAAKA,MAIlB,yBAAKuB,UAAU,WACZD,KAAKzB,MAAML,YACZ,yBAAK+B,UAAU,OACVD,KAAKzB,MAAMe,QAAU,kDAA+B,wBAAIW,UAAU,WAAWF,GAC9E,kBAAC,IAAD,CACIO,IAAK,SAAC5B,GAAD,OAAQ,EAAK6B,WAAa7B,GAC/B8B,iBAnBG,CAACN,IAAM,2CAoBVO,cAAeT,KAAKzB,MAAMW,OAC1BwB,YAAaV,KAAKzB,MAAMc,KACxBsB,gBAAgB,EAChBC,QAASZ,KAAKzB,MAAMF,Y,GA1FlBwC,aCQPC,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCKcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLjC,QAAQiC,MAAMA,EAAMiC,c","file":"static/js/main.7e9c2b00.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport '../App.css'\n\nclass HeatMap extends Component{\n\n    constructor(props){\n\n        console.log(\"constructor\")\n        super(props)\n        this.state = {\n            data:[0],\n            day : {positions:[], options:[]},\n            date_string:\"\",\n            days:[0],\n            center : {\n                lat : 39.8283,\n                lng : -98.5795\n            },\n            zoom : 3.7,\n            loading : true\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"mount\")\n        fetch(\"https://samburgess-covidmap.appspot.com\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              this.setState({\n                data: result,\n                day: {positions : result[result.length-1][1].map( (el) => {\n                  let newEl = {}\n                  newEl['lat'] = Number(el['lng'])  //TODO***** fix this lol\n                  newEl['lng'] = Number(el['lat'])\n                  // newEl['weight'] = Number(el['cases'])\n                  return newEl\n                }),\n                options: {    \n                  opacity: 0.6\n                } \n                },\n                days : result.map( (el) => {\n                  return el[0]\n                }),\n                date_string : result[result.length-1][0],\n                loading : false\n              });\n            },\n            (error) => {\n              console.error(error)\n            }\n          )\n    }\n\n    changeDate = (e) => {\n\n      this.setState({\n        date_string : e.target.innerText,\n        day: {positions : this.state.data.filter((el) => el[0].includes(e.target.innerText))[0][1].map( (el2) => {\n          let newEl = {}\n          newEl['lat'] = Number(el2['lng'])  //TODO***** fix this lol\n          newEl['lng'] = Number(el2['lat'])\n          return newEl\n        })}\n      })\n    }\n    \n    render(){\n\n        const apiKey = {key : 'AIzaSyC9w7ChJ-yY8UIbxUhmDu22Q4c9yRZM8Lw'}\n\n        let dayList = <ul></ul>\n\n        dayList = this.state.days.map( (el) =>\n            <li\n                className=\"DayEl\"\n                key = {el.toString()}\n                onClick = {this.state.loading ? null : this.changeDate}\n                value={el}>{el}</li>\n        )\n\n        return(\n          <div className=\"Wrapper\">\n            {this.state.date_string}\n            <div className=\"Map\">\n                {this.state.loading ? <div>Getting data ....</div> : <ul className=\"DayList\">{dayList}</ul>}\n                <GoogleMapReact  \n                    ref={(el) => this._googleMap = el}\n                    bootstrapURLKeys={apiKey}\n                    defaultCenter={this.state.center}\n                    defaultZoom={this.state.zoom}\n                    heatmapLibrary={true}\n                    heatmap={this.state.day}\n                />\n            </div>\n        </div>\n    )}\n}\n\nexport default HeatMap","import React from 'react';\nimport './App.css';\nimport HeatMap from './components/HeatMap'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HeatMap />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}